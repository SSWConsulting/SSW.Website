{
  "title": "Developing Flexible Authorisation Capabilities in ASP.NET Core",
  "url": "/ssw/NETUG/Sydney.aspx",
  "thumbnail": "/ssw/NETUG/Images/thumbs/thumb-SydneyUG.jpg",
  "thumbnailDescription": "Developing Flexible Authorisation Capabilities in ASP.NET Core",
  "presenterName": "Jason Taylor",
  "presenterProfileUrl": "/people/jason-taylor",
  "startDateTime": "2022-05-18T08:00:00Z",
  "endDateTime": "2022-05-18T12:00:00Z",
  "startShowBannerDateTime": "2022-05-17T14:00:00Z",
  "endShowBannerDateTime": "2022-05-18T12:00:00Z",
  "liveStreamUrl": {
    "description": "Live Stream",
    "url": "/live"
  },
  "calendarType": "User Groups",
  "city": "Sydney",
  "enabled": true,
  "category": "Other",
  "eventShortDescription": "<div class=\"ExternalClass38591BEECDBD450DB782D4B71610CEC2\"><p>May .NET User Group&#58;&#160;Developing Flexible Authorisation Capabilities in ASP.NET Core<br></p><p>ASP.NET Core Identity supports the essentials for authentication and authorisation across many application types such as web, API, and mobile. With Identity, authorisation is a breeze! Developers can implement authorisation checks using numerous methods including roles, claims, and policies. However, this approach is not without limitations.<br></p><p>For larger and more complex systems, you may quickly find yourself stuck in the depths of 'Permissions Hell'. For example, updating authorisation requirements will require code changes, along with the time taken to test and deploy these changes. Checking user or role permissions is also tricky, you'll need to review the code or documentation - and hope the documentation is still up to date! As systems grow, authorisation requirements will grow, and these limitations can slow new development and decrease maintainability.<br></p><p>In this talk, Jason Taylor will demonstrate an approach using permission-based authorisation to overcome these limitations by building a flexible approach to managing roles and permissions from within your system. This will improve the maintainability and visibility of access control across your system. Putting the power into the hands of application users and administrators, rather than developers.<br></p></div>",
  "eventDescription": "<div class=\"ExternalClassCE54CC90DBE84E80BC3C9413050B88FC\"><p>\u200bMay .NET User Group&#58;&#160;Developing Flexible Authorisation Capabilities in ASP.NET Core</p><p>ASP.NET Core Identity supports the essentials for authentication and authorisation across many application types such as web, API, and mobile. With Identity, authorisation is a breeze! Developers can implement authorisation checks using numerous methods including roles, claims, and policies. However, this approach is not without limitations.<br></p><p>For larger and more complex systems, you may quickly find yourself stuck in the depths of 'Permissions Hell'. For example, updating authorisation requirements will require code changes, along with the time taken to test and deploy these changes. Checking user or role permissions is also tricky, you'll need to review the code or documentation - and hope the documentation is still up to date! As systems grow, authorisation requirements will grow, and these limitations can slow new development and decrease maintainability.<br></p><p>In this talk, Jason Taylor will demonstrate an approach using permission-based authorisation to overcome these limitations by building a flexible approach to managing roles and permissions from within your system. This will improve the maintainability and visibility of access control across your system. Putting the power into the hands of application users and administrators, rather than developers.<br></p><p><br></p></div>",
  "description": "May .NET User Group:\u00a0Developing Flexible Authorisation Capabilities in ASP.NET Core\n\nASP.NET Core Identity supports the essentials for authentication and authorisation across many application types such as web, API, and mobile. With Identity, authorisation is a breeze! Developers can implement authorisation checks using numerous methods including roles, claims, and policies. However, this approach is not without limitations.\n\nFor larger and more complex systems, you may quickly find yourself stuck in the depths of 'Permissions Hell'. For example, updating authorisation requirements will require code changes, along with the time taken to test and deploy these changes. Checking user or role permissions is also tricky, you'll need to review the code or documentation - and hope the documentation is still up to date! As systems grow, authorisation requirements will grow, and these limitations can slow new development and decrease maintainability.\n\nIn this talk, Jason Taylor will demonstrate an approach using permission-based authorisation to overcome these limitations by building a flexible approach to managing roles and permissions from within your system. This will improve the maintainability and visibility of access control across your system. Putting the power into the hands of application users and administrators, rather than developers.",
  "showOnPowerSessions": "No",
  "hasVideo": false,
  "youTubeId": "MagItxWxqQ8",
  "evalFormURL": {
    "description": "Evaluation form",
    "url": "https://forms.microsoft.com/Pages/ResponsePage.aspx?id=NHwvrDW56Uir3BHl1PyysPj1WXHPfJ5OhXxqnVi-9WJURENQSTROSEtEVzhUN1k2SDVMQ0FRUDlVUCQlQCN0PWcu"
  },
  "externalPresenters": [
    {
      "LookupId": 16,
      "LookupValue": "Jason Taylor"
    }
  ],
  "presenterList": [
    {
      "presenter": "content/presenters/jason-taylor.mdx"
    }
  ]
}