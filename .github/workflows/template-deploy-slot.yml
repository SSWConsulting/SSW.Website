name: Template - Deploy to slot

on:
  workflow_call:
    inputs:
      environment_name:
        type: string
        required: true
      slot_name:
        type: string
        default: production
        required: false
    secrets:
      AZURE_CREDENTIALS:
        required: true
    outputs:
      url: 
        description: URL to the environment that was deployed to
        value: ${{ jobs.deploy-to-slot.outputs.url }}

defaults:
  run:
    shell: pwsh

jobs:
  deploy-to-slot:
    runs-on: ubuntu-latest

    environment:
      name: ${{ inputs.environment_name }}
      url: ${{ steps.get-app-service-url.outputs.webapp-url }}

    outputs:
      url: ${{ steps.get-app-service-url.outputs.webapp-url }}

    steps:

    - name: Azure CLI - Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: AppService - Create slot
      id: create-slot
      if: github.event_name == 'pull_request'
      run: |
        # check if slot exists
        $alreadyExists = (az webapp deployment slot list `
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} `
          --name ${{ vars.APP_SERVICE_NAME }} `
          --query "[].name" `
          --output tsv `
        ).Contains('${{ inputs.slot_name }}')

        if ($alreadyExists) {
          Write-Host '⏩ slot already exists'
          Return 0;
        }

        Write-Host '👷 need to create slot'

        # need to create slot
        az webapp deployment slot create `
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} `
          --name ${{ vars.APP_SERVICE_NAME }} `
          --slot ${{ inputs.slot_name }} `
          --configuration-source ${{ vars.APP_SERVICE_NAME }} `
          --output none
        Write-Host '✅ slot created'

        # get slot identity
        $identityId = az webapp identity assign `
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} `
          --name ${{ vars.APP_SERVICE_NAME }} `
          --slot ${{ inputs.slot_name }} `
          --query principalId `
          --output tsv
        Write-Host '✅ identity created'

        # Configure WebApp to use the Manage Identity Credentials to perform docker pull operations
        $configId = (
          az webapp show `
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} `
            --name ${{ vars.APP_SERVICE_NAME }} `
            --slot ${{ inputs.slot_name }} `
            --query id `
            --output tsv
          ) + "/config/web"
        az resource update `
          --ids $configId `
          --set properties.acrUseManagedIdentityCreds=True `
          --output none
        Write-Host '✅ acrUseManagedIdentityCreds set'

        $acrId = az acr show `
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} `
          --name ${{ vars.ACR_LOGIN_SERVER }} `
          --query id `
          --output tsv
        Write-Host '✅ acr found'

        # grant access to the identity on ACR
        az role assignment create `
          --assignee-object-id $identityId `
          --assignee-principal-type ServicePrincipal `
          --scope $acrId `
          --role acrpull `
          -o none
        Write-Host '✅ acrpull role granted'

    - name: AppService - Get slot URL
      id: get-app-service-url
      run: |
        $url = az webapp config hostname list `
          --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} `
          --webapp-name ${{ vars.APP_SERVICE_NAME }} `
          --slot ${{ inputs.slot_name }} `
          --query "[0].name" `
          --output tsv

        echo "webapp-url=https://$url" >> $env:GITHUB_OUTPUT

    - name: AppService - Deploy
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ vars.APP_SERVICE_NAME }}
        slot-name: ${{ inputs.slot_name }}
        images: ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.IMAGE_NAME }}:${{ inputs.slot_name }}