name: Check Active PRs and Slots

#on:
#  schedule:
#    - cron: "0 12 */3 * *" # Schedule to run every 3rd day at 12 PM UTC
#  workflow_dispatch:
on:
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: pwsh

permissions:
  id-token: write
  contents: read

jobs:
  check-pr-slots:
    runs-on: ubuntu-latest
    outputs:
      SlotIDs: ${{ steps.listOfSlots.outputs.SlotIDs }}
      AreSlotsEqual: ${{steps.comparision.outputs.AreSlotsEqual }}

    steps:
      - name: Checking out
        uses: actions/checkout@v2

      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
          path: ./.github

      - name: Azure CLI - Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get list of deployed Slots
        id: slotList
        run: |
          $slots = $(az webapp deployment slot list --name ${{ env.APP_SERVICE_NAME }} --resource-group ${{env.AZURE_RESOURCE_GROUP }} --query '[].name' --output tsv | sed 's/pr-//g')
          echo "slots=$slots" >> $env:GITHUB_OUTPUT

      - name: Get list of active PRs
        id: PRList
        run: |
          $active_prs=$(curl -s "https://api.github.com/repos/SSWConsulting/SSW.Website/pulls?state=open" | jq -r '.[].number')
          echo "active_prs=$active_prs" >> $env:GITHUB_OUTPUT

      - name: Compare PRs with Slots
        id: comparision
        run: |
          # Comparing the number of Slots and PRs
          $PRList =  "${{ steps.PRList.outputs.active_prs }}" -split ' '
          $SlotList = "${{ steps.slotList.outputs.slots }}" -split ' '

          $SlotsWithoutPR = $SlotList | Where-Object { $_ -notin $PRList }

          $AreSlotsEqual = $SlotsWithoutPR.Length -eq 0

          if ( $AreSlotsEqual ) {
            echo "✅ - Number of slots are equal to number of active PRs"
          }
          else {
            echo "❌ - Number of slots are not equal to number of active PRs"
          }
          echo "AreSlotsEqual=$AreSlotsEqual" >> $env:GITHUB_OUTPUT

      - name: List of Slots that need to be deleted
        if: ${{ steps.comparision.outputs.AreSlotsEqual == 'False' }}
        id: listOfSlots
        run: |
          # Split the strings into arrays of numbers

          $SlotList = "${{ steps.slotList.outputs.slots }}" -split ' '
          $PRList = "${{ steps.PRList.outputs.active_prs }}" -split ' '

          $zzSlotList = "1165 1174 1190 1183 1112" -split ' '
          $zzPRList = "1190 1183 1174 1165" -split ' '

          # Find the slots present in $SlotList but their PR doesn't exist in $PRList
          $SlotsWithoutPR = $SlotList | Where-Object { $_ -notin $PRList }

          if ( $SlotsWithoutPR.Length -gt 0 ) {
            $ListOfSlots = $SlotsWithoutPR -join ' '
            Write-Host "⚡- These slots need to be deleted : $ListOfSlots"
            echo "SlotIDs=$ListOfSlots" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "✅ - Some PRs have not their slot deployed!"
          }

  invokeDeleteSlot:
    name: Invoking PR Close/Delete
    needs:
      - check-pr-slots #Adding second check to avoid running this flow for the second time when SlotID is already in the memory
    if: needs.check-pr-slots.outputs.SlotIDs != '' && needs.check-pr-slots.outputs.AreSlotsEqual == 'False'
    uses: ./.github/workflows/pr-close-delete-env.yml
    with:
      slotIDs: ${{ needs.check-pr-slots.outputs.SlotIDs }}
    permissions:
      id-token: write
      contents: read
    secrets: inherit
