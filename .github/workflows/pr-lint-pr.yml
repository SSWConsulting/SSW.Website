name: PR - Lint PR

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

concurrency:
  group: ci-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  linked-issue-check:
    runs-on: ubuntu-latest
    name: Check linked issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Checking for linked issues
        shell: pwsh
        id: check_linked_issues
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD
          $diff = $diff -replace '["'']', ''  #Clean-up for the file paths of the newsletter's images.(i.e double & single quotes)

          # TODO: Next time we need to modify which directories we ignore, break this out to a variable which is easy to configure

          $sourceDiff = $diff | Where-Object { $_ -notmatch '^content/' -and $_ -notmatch '^public/' -and $_ -notmatch '^.github/ISSUE_TEMPLATE/' }
          $hasCodeChanges = $sourceDiff.Length -gt 0

          echo "hasCodeChanges=$hasCodeChanges" >> $env:GITHUB_OUTPUT
          echo "sourceDiff=$sourceDiff" >> $env:GITHUB_OUTPUT

          # Source Difference
          if ( ([string]::IsNullOrEmpty($sourceDiff))) {
            echo "🏃 content change only - skipping lint action"
          }
          else {
            echo $sourceDiff
          }

          $success = $false
          if ($hasCodeChanges) {
            # use gh cli to check if PR has linked issues
            $success = gh pr list --json linkedIssues --jq '.[].linkedIssues' | ConvertFrom-Json | Where-Object { $_ -ne $null } | ForEach-Object { $_.length -gt 0 }
          } else {
            $success = $true
          }

          if ($success) {
            $message = ''
          } else {
            $message = 'Please make sure to link the issue(s) you are working on in the PR description.'
          }

          echo "Success: $success"
          echo "Linked issue: $success" >> $env:GITHUB_STEP_SUMMARY
          echo "success=$success" >> $env:GITHUB_OUTPUT
          echo "message=$message" >> $env:GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Get PR title
        id: pr_title
        run: |
          # array of default PR titles
          DEFAULT_TITLES=("TinaCMS content update" "Update from TinaCMS")

          # use gh cli to get the PR title
          PR_TITLE=$(gh pr view ${{ github.event.number }} --json title --jq '.title')
          echo "PR title: $PR_TITLE"

          # check if any of the default titles are found in the PR title
          IS_DEFAULT=false
          for title in "${DEFAULT_TITLES[@]}"; do
            echo "Checking if PR title contains $title"
            if [[ $PR_TITLE == *"$title"* ]]; then
              echo "❌"
              IS_DEFAULT=true
              break
            else
              echo "✅"
            fi
          done

          if [[ $IS_DEFAULT == true ]]; then
            echo "PR title looks like a default" >> $GITHUB_STEP_SUMMARY
            echo "message=Please update the PR title to be more descriptive - Check out https://www.ssw.com.au/rules/write-a-good-pull-request/for more information" >> $GITHUB_OUTPUT
          else
            echo "PR title looks good" >> $GITHUB_STEP_SUMMARY
            echo "message=" >> $GITHUB_OUTPUT
          fi
          success=!$IS_DEFAULT
          echo "success=$success" >> $GITHUB_OUTPUT
          echo "message=$message" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: ntsd/auto-request-changes-action@v3
        if: ${{ github.event.pull_request && failure() }}
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          review-message: |
            ${{ steps.check_linked_issues.outputs.message }}
            ${{ steps.pr_title.outputs.message }}

      - uses: hmarr/auto-approve-action@v3
        if: ${{ github.event.pull_request && success() }}
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          review-message: "LGTM 🚀"
